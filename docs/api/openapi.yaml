openapi: 3.1.0
info:
  title: Thunder Backend API
  description: >
    This document describes Thunder's backend endpoints, parameters and
    example requests/responses. It is meant to be kept in sync with the codebase.
    - Use `servers` below to set your local/production base URLs.
    - Auth is via HTTP Bearer (JWT) unless noted otherwise.
  version: 0.1.0
servers:
  - url: http://localhost:{port}/api/v1
    description: Local development
    variables:
      port:
        default: "3000"
  - url: https://api.thunder.example.com/api/v1
    description: Production (replace with real host)

tags:
  - name: Health
  - name: Auth
  - name: Users
  - name: Projects

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
              examples:
                ok:
                  value: { status: "ok", uptime: 123.45 }

  /auth/register:
    post:
      tags: [Auth]
      summary: Create an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterInput"
            examples:
              sample:
                value:
                  name: "Ada Lovelace"
                  email: "ada@example.com"
                  password: "StrongP@ssw0rd"
      responses:
        "201":
          description: Account created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
            examples:
              sample:
                value:
                  email: "ada@example.com"
                  password: "StrongP@ssw0rd"
      responses:
        "200":
          description: Logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout current user
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Logged out (no content)

  /users/me:
    get:
      tags: [Users]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    patch:
      tags: [Users]
      summary: Update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      tags: [Users]
      summary: Get a user by id
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /projects:
    get:
      tags: [Projects]
      summary: List projects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        "200":
          description: A paginated list of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Project" }
                  page: { type: integer }
                  limit: { type: integer }
                  total: { type: integer }
    post:
      tags: [Projects]
      summary: Create a project
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /projects/{id}:
    get:
      tags: [Projects]
      summary: Get project by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    patch:
      tags: [Projects]
      summary: Update a project
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectInput"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    delete:
      tags: [Projects]
      summary: Delete a project
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Deleted

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Health:
      type: object
      properties:
        status: { type: string, enum: ["ok"] }
        uptime: { type: number, description: "Process uptime in seconds" }
      required: [status]
    Error:
      type: object
      properties:
        message: { type: string }
        code: { type: string }
        details: { type: object }
      required: [message]
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        avatarUrl: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    RegisterInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
      required: [name, email, password]
    LoginInput:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string }
      required: [email, password]
    UpdateUserInput:
      type: object
      properties:
        name: { type: string }
        avatarUrl: { type: string }
      additionalProperties: false
    AuthResponse:
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        accessToken: { type: string, description: "JWT access token" }
        tokenType: { type: string, example: "Bearer" }
        expiresIn: { type: integer, example: 3600 }
      required: [user, accessToken]
    Project:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        ownerId: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CreateProjectInput:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
      required: [name]
    UpdateProjectInput:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
      additionalProperties: false